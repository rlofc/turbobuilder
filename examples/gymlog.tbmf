App = application {
    title = "CHALK";
}

Trainee = entity {
    Name = field { type: text; size: 16; listed: true; }
    SetLogTypeToCount = field { ref: SetLogType.Name; size: 10; listed: true; }
    Sessions = relation { ref: Session.Trainee; orderdesc: Session.Date; }
    Exercises = relation { ref: Exercise.Trainee; }
    FourWeeksAverageIntensity = field { type: auto; size: 10; listed: false;
        value: RollingDaysAvg(Sessions.AverageIntensityOfSets, Sessions.Date, 28);
    }
    AverageVolume = field { type: auto; size: 10; listed: false;
        value: Avg(Sessions.Volume); format: "%.0fKg";
    }
}

Session = entity {
    Trainee = field { ref: Trainee.Name; size: 16; listed: true; }
    Date = field { type: date; size: 12; listed: true; }
    Description = field { type: text; size: 30; listed: true; }
    Exercises = relation { ref: SessionExercise.Session; orderasc: SessionExercise.Index;}
    SetLogTypeToCount = field { type:auto; size: 10; listed: false; hidden: true;
        value: Get(Trainee.SetLogTypeToCount);
    }
    AverageIntensity = field { type: auto; size: 10; listed: false;
        value: Avg(Exercises.RelativeIntensity);
    }
    Volume = field { type: auto; size: 10; listed: false;
        value: Sum(Exercises.Volume);
    }
    AverageWeightActuallyLifted = field { type: auto; size: 10; listed: false;
        value: Div(Sum(Exercises.Volume),Sum(Exercises.TotalReps));
    }
    AverageIntensityOfSets = field { type: auto; size: 10; listed: false;
        value: Avg(Exercises.AverageIntensityOfSets);
    }
}

Exercise = entity {
    Trainee = field { ref: Trainee.Name; size: 16; listed: true; }
    Name = field { type: text; size: 12; listed: true; }
    Sessions = relation { ref: SessionExercise.Exercise; orderdesc: Session.Date; }
    OneRepMax = field { type: real; size: 6; format: "%.2f"; listed: true; }
    AverageIntensity = field { type: auto; size: 10; listed: false;
        value: RollingDaysAvg(Sessions.AverageIntensityOfSets, Sessions.Date, 20);
    }
    ActualRepMax = field { type: auto; size: 10; listed: false;
        value: Max(Sessions.MaxReached);
    }
}

Variation = entity {
    Name = field { type: text; size: 30; listed: true; }
    Sessions = relation { ref: SessionExercise.Variation; orderdesc: Session.Date; }
    Occurances = field { type: auto; size: 10; listed: false; 
        value: Count(Sessions.Sets);
    }
}

SessionExercise = entity {
    Session = field { ref: Session.Date; size: 12; listed: true; }
    Index = field { type: text; size: 4; listed: true; }
    Exercise = field { ref: Exercise.Name; size: 12; listed: true;
        filter: RefEq(Trainee, Session.Trainee);
    }
    Variation = field { ref: Variation.Name; size: 30; listed: true;}
    Sets = field { type: integer; size: 3; listed: true; }
    Reps = field { type: integer; size: 3; listed: true; }
    Weight = field { type: real; size: 6; format: "%.2f"; listed: true; }
    SetsLog = relation { ref: SessionExerciseSetLog.Exercise;}
    RelativeIntensity = field { type: auto; size: 10; listed: false;
        value: Div(Weight, Exercise.OneRepMax);
    }
    Volume = field { type: auto; size: 10; listed: false;
        value: Sum(SetsLog.Volume);
    }
    TotalReps = field { type: auto; size: 10; listed: false;
        value: Sum(SetsLog.Reps);
    }
    MaxReached = field { type: auto; size: 10; listed: false;
        value: Max(SetsLog.Weight);
    }
    MaxIntensityReached = field { type: auto; size: 10; listed: false;
        value: Max(SetsLog.Intensity);
    }
    AverageIntensityOfSets = field { type: auto; size: 10; listed: false;
        value: AvgIfEq(SetsLog.Intensity, SetsLog.Type,Session.SetLogTypeToCount);
    }
    ORM = field { type: auto; size: 10; listed: false;
        value: Mul(Exercise.OneRepMax, Div(Exercise.OneRepMax, Exercise.OneRepMax));
    }
}

SessionExerciseSetLog = entity {
    Exercise = field { ref: SessionExercise.Exercise; size: 12; listed: true; }
    Type = field { ref: SetLogType.Name; size: 10; listed: true; }
    Reps = field { type: integer; size: 3; listed: true; }
    Weight = field { type: real; size: 6; format: "%.2f"; listed: true; }
    Notes = field { type: text; size: 30; listed: true; }
    Volume = field { type: auto; size: 10; listed: false;
        value: Mul(Weight,Reps);
    }
    Intensity = field { type: auto; size: 10; listed: false;
        value: Div(Weight,Exercise.ORM);
    }
}

SetLogType = entity {
    Name = field { type:text; size: 10; listed: true; }
    LogEntries = relation { ref: SessionExerciseSetLog.Type;}
    Trainees = relation { ref: Trainee.SetLogTypeToCount;}
    Sessions = relation { ref: Session.SetLogTypeToCount;}
}

English = translation {
    SessionExercise = "Session Exercise";
    SessionExerciseSetLog = "Training Log";
    FourWeeksAverageIntensity = "4 weeks average intensity";
}
